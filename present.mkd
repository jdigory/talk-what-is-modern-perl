# What is Modern Perl?

## Josh Lavin (DIGORY)

### The Perl Conference 2017<br>Washington, DC

[jlavin.endpoint.com/talks/what-is-modern-perl/](https://jlavin.endpoint.com/talks/what-is-modern-perl/)

---

<!-- .slide: data-background="dist/images/End_point_dark_on_light.svg" data-background-size="90%" -->

Note: Josh Lavin. End Point Corp - web consultancy. Been using Perl for
      15 years, but only in a modern way for the last 3 years. I still
      have a lot to learn.

---

<!-- .slide: data-background="dist/images/andrew-collins-178963.jpg" -->
<!-- photo by https://unsplash.com/@andrewcollins -->

# How is &ldquo;Modern Perl&rdquo; defined?

Note: or can it be?

---

# `use strict;`
# `use warnings;`
# _?_

Note: good ideas, but no

---

# `use Modern::Perl;`
# _?_

Note: if you want to, but only a start

---

<!-- .slide: data-background="dist/images/twitter-modern-perl-teethteaparty.png" data-background-size="79%" -->

Note: https://twitter.com/CarolynLowman72/status/798216949440409600

---

<!-- .slide: data-background="dist/images/twitter-modern-perl-sriedel.png" data-background-size="59%" -->

Note: from the creator of Catalyst & Mojolicious

---

# An oxymoron?

Note: Perl can be used beyond small, one-file scripts.

---

<!-- .slide: data-background="dist/images/modern-perl-book-2002.jpg" data-background-size="45%" -->

Note: the original "Modern Perl" book, circa 2002. I haven't read this,
      but probably outdated.

---

<!-- .slide: data-background="dist/images/modern-perl-chromatic-2015.jpg" data-background-size="50%" -->

Note: First published 2010, updated in 2015. A great resource. Available
      for free online, link at end of the presentation. I briefly touch
      on some subjects covered by this book, but for more in-depth, I
      highly recommend checking out the book.

---

# &ldquo;Modern Perl is a mindset.&rdquo;

<cite>&mdash; _Modern Perl_, chromatic</cite>

Note: "It's an approach to writing great software with the Perl programming language."

---

<!-- .slide: data-background="dist/images/dana-marin-152965.jpg" -->
<!-- photo by https://unsplash.com/@amsterdamian -->

# Some quotes

Note: I asked some folks in the Perl community how they would succinctly
      define "modern Perl".

---

## &ldquo;Modern Perl is code that achieves its goal cleanly, without using old practices that tend to cause more problems then they solve. 

&hellip;

Note: Chad Granum, author of Test2

---

## &ldquo;Truly modern Perl code avoids the obviously-bad practices of the past, because history has shaped it.&rdquo;

<cite>&mdash; Chad Granum (EXODIST)</cite>

Note: &ldquo;For example, `/x` on a regex to split logical parts of the regex on independent lines.

---

## &ldquo;Writing Modern Perl means spending less time, less angst, and less effort in writing code that is correct, accurate, and easy to work and collaborate on.&rdquo;

<cite>&mdash; Sawyer X (XSAWYERX)</cite>

---

## &ldquo;Modern Perl is using the features that come in recent versions of Perl and keeping up to date with the best of CPAN as it evolves.&rdquo;

<cite>&mdash; Dave Rolsky (DROLSKY)</cite>

---

<!-- .slide: data-background="dist/images/alex-hockett-42938.jpg" -->
<!-- photo by https://unsplash.com/@ahock -->

# Why does it matter?

Note: Modern Perl is how we can apply modern software development practices to Perl.

---

## &ldquo;It&rsquo;s how effective Perl programmers write powerful, maintainable, scalable, concise, and excellent code.&rdquo;

<cite>&mdash; _Modern Perl_, chromatic</cite>

---

## &ldquo;&hellip;using the newer tools will make a programmer more productive and a program easier to maintain.&rdquo;

<cite>&mdash; Dave Cross<br>[josetteorama.com/what-is-modern-perl/](http://www.josetteorama.com/what-is-modern-perl/)</cite>

Note: who doesn't want that?

---

<!-- .slide: data-background="dist/images/mike-kenneally-2236.jpg" -->
<!-- photo by https://unsplash.com/@asthetik -->

# Mindsets &amp; Toolsets

---

# Clean, maintainable code

Note: Balancing act of getting the job done _now_ vs doing the job _right_

---

## easy to understand &amp; modify

---

<!-- .slide: data-background="dist/images/psychopath.png" data-background-size="65%" -->

Note: https://stackoverflow.com/questions/876089/who-wrote-this-programing-saying-always-code-as-if-the-guy-who-ends-up-maintai

---

# Documentation

Note: varying schools of thought

---

## communicate your thoughts to yourself

Note: https://zachholman.com/posts/documentation/

---

# Modular code

---

## Perl modules

* logical separation <!-- .element: class="fragment" -->
* API boundary <!-- .element: class="fragment" -->
* code reuse <!-- .element: class="fragment" -->

Note: vs. one big script, or one big subroutine. Organize the code. What
      should be accessible by callers, and what is private? Small subs.

---

# Coding standards

Note: guidelines for how your programmers in your organization should
      structure their code

---

<!-- .slide: data-background="dist/images/pbp.jpg" data-background-size="50%" -->

Note: these are just guidelines from Damian -- customize to your liking.
      A lot of great ideas. Also has a video series on _Modern Perl Best
      Practices_, which re-evaluates the advice in PBP.

---

# `Perl::Critic`

Note: Can critique your code. Most policies are based on PBP. Can be
      very insightful.

---

```
print "test";
```

<pre>

Code before strictures are enabled at line 1, column 1.
   See page 429 of PBP. (Severity: 5)
Code before warnings are enabled at line 1, column 1.
   See page 431 of PBP. (Severity: 5)
Useless interpolation of literal string at line 1, column 7.
   See page 51 of PBP. (Severity: 5)
</pre>

---

```
use strict;
use warnings;
print 'test';
```

<pre>

source OK
</pre>

---

# `Perl::Tidy`

`perltidy -pbp`

Note: tidies up your code. Diffuses arguments.

---

<pre><code style="width:50%; float:left">
my $state = {
    virginia => 'VA',
    florida => 'FL',
    utah => 'UT',
};

if($foo eq 'bar'){
    print 'foo is bar';
} else {
    print 'nope';
}
</code></pre>

<pre class="fragment"><code>
my $state = {
    virginia => 'VA',
    florida  => 'FL',
    utah     => 'UT',
};

if ( $foo eq 'bar' ) {
    print 'foo is bar';
}
else {
    print 'nope';
}
</code></pre>

---

# Use the CPAN

Note: Comprehensive Perl Archive Network. Where Perl modules are shared.
      Avail yourself of the experience of others.

---

<!-- .slide: data-background="dist/images/metacpan-logo@2x.png" data-background-size="75%" -->

Note: MetaCPAN has a lot cleaner interface, links to other services,
      like GitHub. All the cool kids are using it.

---

<!-- .slide: data-background="dist/images/DuckDuckGo_Homepage.png" data-background-size="95%" -->

<br><br>
!cpan Module

---

# `App::cpanminus`

https://cpanmin.us

`cpanm Module`

---

# Object Oriented Programming

Note: won't go into _why_ to use OOP; plenty of info online (& controversy)

---

## Old-school objects

<pre><code data-noescape>
package Foo;
use strict;
use warnings;
sub new {
    my $class = shift;
    my $opt = shift || {};
    <span class="fragment">$opt->{ic_present} = $Vend::Cfg->{Database};</span>
    my $self = { %$opt };
    return bless $self, $class;
}
1;
</code></pre>

Note: the constructor for the class. Basic attribute there

---

<!-- .slide: data-background="dist/images/stephen-ellis-116721.jpg" -->
<!-- photo by https://unsplash.com/@fstopusa -->

Note: Moose/Moo are "object systems". They make Perl 5 OOP easier,
      more consistent, and less tedious. Moo provides almost
      two-thirds of Moose.

---

## `Moo(se)?` objects

<pre><code data-noescape>
package Foo;
use Moo;
<span class="fragment">has ic_present => (
    is => 'ro',
    default => sub { $Vend::Cfg->{Database} },
);</span>
1;
</code></pre>

Note: strict and warnings for free. "new" constructor for free. There's
      our attribute.

---

# Modern Frameworks

Note: not CGI.pm (no longer a core module)

---

# Catalyst
# Dancer
# Mojolicious

Note: all different. All build on Plack (which effectively replaces CGI
      and allows Perl-based web apps to talk to web servers).

---

<!-- .slide: data-background="dist/images/nordwood-themes-166423.jpg" -->
<!-- photo by https://unsplash.com/@nordwood -->

# Testing
# <br>

Note: various kinds: unit, system, etc. Unit is usually the smallest
      part of code you can test, such as the method in a class. System
      is the whole system, which is usually something we do, whether we
      call it that or not.

---

# a personal story

Note: I usually check to make sure my code works, before handing it over
      to a client for review. So I've at least done that much. But never
      did unit testing until about 3 years ago. Heard talks on unit
      testing, Test Driven Development, thought, "I should do that."

---

```
UserTag mailchimp Routine <<EOR
sub {
    my ($thing1, $thing2, $opt) = @_;
    ...
    return $something;
}
EOR
```

Note: problem was, with the application I use (Interchange), you call
      custom code with a plugin called a UserTag. The app would call
      this when you called the usertag in your template code. But you
      can't unit-test this.

---

```
UserTag mailchimp Routine <<EOR
use Ext::MailChimp3;
sub {
    my ($method, $opt) = @_;
    my $mc = Ext::MailChimp3->new( ... );
    return $mc->do( $method, $opt );
}
EOR
```

Note: so in this form, I move my Perl code to a real Perl module. Now I
      can test the methods in Ext::MailChimp3. This is an old app, and
      if you use newer frameworks, you don't have to mess with this, but
      it shows that even with legacy software, you have few excuses.

---

## You can do &ldquo;modern&rdquo; wrong

```
use Dancer2;

get '/mailchimp/*/**' => sub {
    my ($method, $opt) = splat;
    ...
    # bunch of inline code here
    ...
    return $something;
};
```

---

# Testing tools

---

## `Test::More`
##<span class="fragment">`Test2::Bundle::Extended`</span>

---

<pre><code data-noescape>
use Test::More;
use_ok('Vend::API::User');
<span class="fragment">is(
    Vend::API::User::fetch(),
    undef,
    'no user'
);</span>
done_testing();

<span class="fragment">$ prove -l t/vend/api/user.t
t/vend/api/user.t .. ok 
All tests successful.</span>
</code></pre>

Note: what it looks like

---

# `DBIx::Class`

Note: what if our database access could be done as an object?

---

<!-- .slide: data-background="dist/images/montylov-216756.jpg" -->
<!-- photo by https://unsplash.com/@montylov -->

# Summary
# <br>

---

# Questions?

---

## Slides, notes

[github.com/jdigory/talk-what-is-modern-perl](https://github.com/jdigory/talk-what-is-modern-perl)

## Resources

Modern Perl, 4th edition
by chromatic
http://www.modernperlbooks.com/books/modern_perl_2016/

https://speakerdeck.com/genehack/modern-perl-for-the-unfrozen-paleolithic-perl-programmer-1

https://engineering.semantics3.com/2016/06/15/a-perl-toolchain-for-building-micro-services-at-scale/

https://speakerdeck.com/miccheng/modern-software-development-practices

Modern PBP Video series
http://shop.oreilly.com/product/110000790.do
https://www.safaribooksonline.com/library/view/modern-perl-best/9781491910719/
